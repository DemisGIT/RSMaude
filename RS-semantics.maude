fmod ENTITY-REACTION-TYPES is
    --- including natural numbers and efficient Bool ops 
    protecting EXT-BOOL .
    protecting NAT .

    sorts Entity Entities .  
    sorts Reaction Reactions Sequence MSequence State . 
    subsort Reaction < Reactions .
    subsort Entity < Entities < Sequence < MSequence .
  
  
  
    var x : Entity .
    vars A B S S' T R I P : Entities .
   
    --- Sets of Entities and operations
    op empty : -> Entities [ctor] . 
    op __ : Entities Entities -> Entities [ctor assoc comm prec 1 id: empty] .
   
    eq x x = x .
  
    op _in_ : Entity Entities -> Bool .
    eq x in (x A) = true .
    eq x in A = false [owise] .
  
    op _subset_ : Entities Entities -> Bool .
    eq empty subset A = true .
    eq (x A) subset B = x in B and-then A subset B .
 
  
    op intersection : Entities Entities -> Entities .
    eq intersection(A,empty) = empty .
    eq intersection(A,B) = $intersect(A, B, empty) .
    op $intersect : Entities Entities Entities -> Entities .
    eq $intersect(empty, S', A) = A .
    eq $intersect((x S), S', A) = $intersect(S, S', if x in S' then (x A) else A fi) .
   
    op isDisjoint : Entities Entities -> Bool .
    eq isDisjoint(empty,A) = true .
    eq isDisjoint((x A), B) = if x in B then false else isDisjoint(A,B) fi .
  

  
    --- RS data structures and operations ---
    
    --- A reaction is a triple of Entities 
    op [_,_,_] : Entities Entities Entities -> Reaction [ctor] .
  
    --- _;_ models list of Reactions 
    op empty : -> Reactions [ctor] .
    op _;_ : Reactions Reactions -> Reactions [ctor assoc id: empty] .
  
    --- _,_ models Sequences as list of set of Entities. 
    op _,_ : Sequence Sequence -> Sequence [ ctor assoc prec 2 ] .
    op empty : -> Sequence [ctor] .
  
    op emptySeq : NzNat -> Sequence .
    eq emptySeq(s(0)) =  empty .
    eq emptySeq(s(s(n:Nat))) = empty , emptySeq(s(n:Nat)) .
  
    --- Multisets of Sequences
    op _+_ : MSequence MSequence -> MSequence [ctor comm assoc prec 3] .
   
    --- A system state is a triple that consists of
    ---  1) A list of reactions
    ---  2) A multiset of Sequences
    ---  3) A set of Entities (that is, products generated by reactions) 
	
    op <_|_|_> : Reactions MSequence Entities -> State [ctor] .
  
    --- Is a reaction [ R,I,P] enabled by T?
    op en : Reaction Entities -> Bool .
    eq en([R,I,P],T)  = (R subset T) and-then isDisjoint(I,T) .
  
    --- Apply a reaction [ R,I,P] to a set of Entities T
    op apply : Reaction Entities -> Entities .
    eq apply([R,I,P],T) = if en([ R,I,P],T) then P else empty fi .
  
    --- Apply a list of Reactions to a set of Entities T
	var r : Reaction .
	var Rs : Reactions .
    op applyAll : Reactions Entities -> Entities .
    eq applyAll(empty,T) = empty .
    eq applyAll((r ; Rs),T) = apply(r,T) applyAll(Rs,T) .

endfm	

mod RS is
   pr ENTITY-REACTION-TYPES . 
    
   var A : Reactions .
   vars C D : Entities .
   vars Cs  : Sequence .
   var M : MSequence .
  
  
   rl [choice] :   < A | Cs + M | D > => < A | Cs | D > .
   rl [process] : < A | (C,Cs) | D > => < A | Cs | applyAll(A, C D) > . 
 

  
  --- Example:  Gene Regulation
  ops stat4 irak s4ir tbeth ifngammam tbetm gata3 stat1h stat1m il4 ifngammarm socs1 ifngammarm ifngammah
      il4r il12 stat6 il12r il18 il18r ifnbeta ifnbetar ifngammarh :  -> Entity [ctor] .
	  
  op GR : -> Reactions [ctor] .
  eq GR = [ stat4 , irak s4ir tbeth, ifngammam ] ; [ tbetm, irak s4ir, ifngammam ] ;
          [ tbetm, s4ir tbeth, ifngammam ] ;
          [ stat4 tbetm , s4ir , ifngammam  ] ;
          [ stat4 tbetm, irak tbeth, ifngammam ] ;
          [ stat4 irak, empty, ifngammah ] ;
          [ tbeth, empty, ifngammah ] ;
          [ gata3, stat1h stat1m, il4 ] ;
          [ ifngammam, empty, ifngammarm ] ;
          [ ifngammah socs1, empty, ifngammarm ] ;
          [ ifngammah, socs1, ifngammarh ] ;
          [ il4, socs1, il4r ] ;
          [ il12, stat6, il12r ] ;
          [ il18, stat6, il18r ] ;
          [ ifnbeta, empty, ifnbetar ] ;
          [ ifnbetar, ifngammarh, stat1m ] ;
          [ ifngammarm, empty, stat1m ] ;
          [ ifngammarh, empty, stat1h ] ;
          [ il4r, empty, stat6 ] ;
          [ il12r, gata3, stat4 ] ;
          [ il18r, empty, irak ] ;
          [ stat1h, empty, socs1 ] ;
          [ stat1m, empty, socs1 ] ;
          [ tbeth, empty, socs1 ] ;
          [ tbetm, empty, socs1 ] ;
          [ stat6, tbeth tbetm, gata3 ] ;
          [ gata3, tbeth tbetm, gata3 ] ;
          [ tbetm, tbeth gata3 stat1h, tbetm ] ; 
          [ stat1m, tbeth gata3 stat1h, tbetm ] ;
          [ tbeth, gata3, tbeth ] ;
          [ stat1h, gata3, tbeth ] ;
          [ il12r il18r, gata3, s4ir ] .
		  
	      op CtxGR : -> Sequence [ctor] .
	      eq CtxGR = il12 il18 .	  		  									  
endm

--- Example of a 7-step interactive process in a Gene Regulatory Network
---rew [7] < GR |  ifngammah,empty,empty,stat1h il4,empty,empty,empty | empty > .

--- Example  of reachability problem in a Gene Regulatoru Network (no solutions)
---(
search [1,7] < [ stat4 , irak s4ir tbeth, ifngammam ] ; [ tbetm, irak s4ir, ifngammam ] ; [ tbetm, s4ir tbeth, ifngammam ] ; [ stat4 tbetm , s4ir , ifngammam  ] ; [ stat4 tbetm, irak tbeth, ifngammam ] ; [ stat4 irak, empty, ifngammah ] ; [ tbeth, empty, ifngammah ] ; [ gata3, stat1h stat1m, il4 ] ; [ ifngammam, empty, ifngammarm ] ; [ ifngammah socs1, empty, ifngammarm ] ; [ ifngammah, socs1, ifngammarh ] ; [ il4, socs1, il4r ] ; [ il12, stat6, il12r ] ; [ il18, stat6, il18r ] ; [ ifnbeta, empty, ifnbetar ] ; [ ifnbetar, ifngammarh, stat1m ] ; [ ifngammarm, empty, stat1m ] ; [ ifngammarh, empty, stat1h ] ; [ il4r, empty, stat6 ] ; [ il12r, gata3, stat4 ] ; [ il18r, empty, irak ] ; [ stat1h, empty, socs1 ] ; [ stat1m, empty, socs1 ] ; [ tbeth, empty, socs1 ] ; [ tbetm, empty, socs1 ] ; [ stat6, tbeth tbetm, gata3 ] ; [ gata3, tbeth tbetm, gata3 ] ; [ tbetm, tbeth gata3 stat1h, tbetm ] ; [ stat1m, tbeth gata3 stat1h, tbetm ] ; [ tbeth, gata3, tbeth ] ; [ stat1h, gata3, tbeth ] ; [ il12r il18r, gata3, s4ir ] | ifngammah,empty,empty,stat1h il4,empty,empty,empty | empty > =>* < Rs:Reactions | Cs:Sequence | tbetm T:Entities > .
)

--- Example of reachability problem in a Gene Regulatoru Network (1 solution)

search [1,7] < [ stat4 , irak s4ir tbeth, ifngammam ] ; [ tbetm, irak s4ir, ifngammam ] ; [ tbetm, s4ir tbeth, ifngammam ] ; [ stat4 tbetm , s4ir , ifngammam  ] ; [ stat4 tbetm, irak tbeth, ifngammam ] ; [ stat4 irak, empty, ifngammah ] ; [ tbeth, empty, ifngammah ] ; [ gata3, stat1h stat1m, il4 ] ; [ ifngammam, empty, ifngammarm ] ; [ ifngammah socs1, empty, ifngammarm ] ; [ ifngammah, socs1, ifngammarh ] ; [ il4, socs1, il4r ] ; [ il12, stat6, il12r ] ; [ il18, stat6, il18r ] ; [ ifnbeta, empty, ifnbetar ] ; [ ifnbetar, ifngammarh, stat1m ] ; [ ifngammarm, empty, stat1m ] ; [ ifngammarh, empty, stat1h ] ; [ il4r, empty, stat6 ] ; [ il12r, gata3, stat4 ] ; [ il18r, empty, irak ] ; [ stat1h, empty, socs1 ] ; [ stat1m, empty, socs1 ] ; [ tbeth, empty, socs1 ] ; [ tbetm, empty, socs1 ] ; [ stat6, tbeth tbetm, gata3 ] ; [ gata3, tbeth tbetm, gata3 ] ; [ tbetm, tbeth gata3 stat1h, tbetm ] ; [ stat1m, tbeth gata3 stat1h, tbetm ] ; [ tbeth, gata3, tbeth ] ; [ stat1h, gata3, tbeth ] ; [ il12r il18r, gata3, s4ir ] | ifngammah,empty,empty,stat1h il4,empty,empty,empty | empty > =>* < Rs:Reactions | Cs:Sequence | tbeth T:Entities > .
