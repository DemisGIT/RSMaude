fmod ENTITY-REACTION-TYPES is
	protecting EXT-BOOL .
    --- modeling Entities and their functionality
    sorts Entity Entities .
    subsort Entity < Entities .
  
  
    var x : Entity .
    vars A B S S' : Entities .
   
    ops stat4 irak s4ir tbeth ifngammam tbetm gata3 stat1h stat1m il4 ifngammarm
        socs1 ifngammarm ifngammah il4r il12 stat6 il12r il18 il18r 
  	  ifnbeta ifnbetar ifngammarh :  -> Entity [ctor] . 
	  
    op empty : -> Entities [ctor] . 
    op __ : Entities Entities -> Entities [ctor assoc comm prec 1 id: empty] .
   
    eq x x = x .
  
    op _in_ : Entity Entities -> Bool .
    eq x in (x A) = true .
    eq x in A = false [owise] .
  
    op _subset_ : Entities Entities -> Bool .
    eq empty subset A = true .
    eq (x A) subset B = x in B and-then A subset B .
   
    op isDisjoint : Entities Entities -> Bool .
    eq isDisjoint(empty,A) = true .
    eq isDisjoint((x A), B) = if x in B then false else isDisjoint(A,B) fi .
  
    op _\_ : Entities Entities -> Entities [gather (E e)] . 
    eq A \ empty = A . 
    eq A \ B = $diff(A, B, empty) . 
 
    op $diff : Entities Entities Entities -> Entities . 
    eq $diff(empty, B, A) = A . 
    eq $diff((x S), S', A) = $diff(S, S', if (x in S') then A else (x A) fi) .
  
    --- Modeling Reactions and their functionality
    sorts Reaction Reactions State . 
    subsort Reaction < Reactions .
  
    op empty : -> Reactions [ctor] .
    op _;_ : Reactions Reactions -> Reactions [ctor assoc id: empty] .
	
	var R R' : Reactions .
	var r r' : Reaction .
    op _\_ : Reactions Reactions -> Reactions .
	op _in_ : Reaction Reactions -> Bool .
	
	eq r in empty = false .
	eq r in r' ; R = if (r == r') then true else r in R fi .
	eq empty \ R' = empty .
	eq (r ; R) \ R' = if (r in R' == false) then r ; (R \ R')
                                            else (R \ R') fi .
	
	
	
    op [_,_,_] : Entities Entities Entities -> Reaction [ctor] .
    op fail : -> Reaction [ctor] .
	
    op GR : -> Reactions [ctor] .
    eq GR = [ stat4 , irak s4ir tbeth, ifngammam ] ; [ tbetm, irak s4ir, ifngammam ] ;
            [ tbetm, s4ir tbeth, ifngammam ] ;
            [ stat4 tbetm , s4ir , ifngammam  ] ;
            [ stat4 tbetm, irak tbeth, ifngammam ] ;
            [ stat4 irak, empty, ifngammah ] ;
            [ tbeth, empty, ifngammah ] ;
            [ gata3, stat1h stat1m, il4 ] ;
            [ ifngammam, empty, ifngammarm ] ;
            [ ifngammah socs1, empty, ifngammarm ] ;
            [ ifngammah, socs1, ifngammarh ] ;
            [ il4, socs1, il4r ] ;
            [ il12, stat6, il12r ] ;
            [ il18, stat6, il18r ] ;
            [ ifnbeta, empty, ifnbetar ] ;
            [ ifnbetar, ifngammarh, stat1m ] ;
            [ ifngammarm, empty, stat1m ] ;
            [ ifngammarh, empty, stat1h ] ;
            [ il4r, empty, stat6 ] ;
            [ il12r, gata3, stat4 ] ;
            [ il18r, empty, irak ] ;
            [ stat1h, empty, socs1 ] ;
            [ stat1m, empty, socs1 ] ;
            [ tbeth, empty, socs1 ] ;
            [ tbetm, empty, socs1 ] ;
            [ stat6, tbeth tbetm, gata3 ] ;
            [ gata3, tbeth tbetm, gata3 ] ;
            [ tbetm, tbeth gata3 stat1h, tbetm ] ; 
            [ stat1m, tbeth gata3 stat1h, tbetm ] ;
            [ tbeth, gata3, tbeth ] ;
            [ stat1h, gata3, tbeth ] ;
            [ il12r il18r, gata3, s4ir ] .
  

  
    op <_|_|_|_|_> : Reactions Entities Reactions Entities Reactions -> State [ctor] .
    op <_|_|_|_> : Reactions Entities Reactions Entities -> State [ctor] .
    op +<_|_> : Reactions Entities -> State [ctor] .
	op -<_|_> : Reactions Entities -> State [ctor] .
endfm  
	
mod FORWARDSLICER-RS is
  
  pr ENTITY-REACTION-TYPES .
	
  vars R I P T : Entities .
  	  
  op en : Reaction Entities -> Bool .
  eq en([R,I,P],T)  = (R subset T) and-then isDisjoint(I,T) .
  
  op apply : Reaction Entities -> Reaction .
  eq apply([R,I,P],T) = if en([ R,I,P],T) then [ R,I,P ] else fail fi .
  
  
  sort Result .
  op {_|_} : Reactions Entities -> Result [ctor] .
  
  vars A A' Rs : Reactions .
  var Res : Result .
  var P' : Entities .
  
  op applyAll+ : Reactions Entities -> Result .
  eq applyAll+(A,T) = $applyAll(A,T,{ empty | empty }) .
  
  op $applyAll : Reactions Entities Result -> Result .
  eq $applyAll(empty,T,Res) = Res .
  eq $applyAll(([ R,I,P ] ; A), T , { A' | P' }) = 
           $applyAll(A, T, if apply([ R,I,P ],T) =/= fail  then 
                                   {[ R,I,P ] ; A' | P P'} 
							else 
									{ A' | P' } 
							fi 
					) .		
	
 vars D	D' D-new D-new' : Entities .
 vars Au Au-new Au' Au-new' : Reactions .
 				
 crl [process-fs] : < A | D | Au | D' | Au' > => 
                 < A | D-new | Au-new | D-new' | Au-new' > if 
				               { Au-new' | D-new' } := applyAll+(A, D') /\
							   { Au-new | D-new } := applyAll+(A, D) .
							 							     						     
 rl [slice+] : < A | D | Au | D' | Au' > => +< (Au' \ Au) | D' \ D > .

 rl [slice-] : < A | D | Au | D' | Au' > => -< (Au \ Au') | D \ D' > .			 										  
endm
--- 4-step interactive process example
---(
rew [4] < [ stat4 , irak s4ir tbeth, ifngammam ] ; [ tbetm, irak s4ir, ifngammam ] ; [ tbetm, s4ir tbeth, ifngammam ] ; [ stat4 tbetm , s4ir , ifngammam  ] ; [ stat4 tbetm, irak tbeth, ifngammam ] ; [ stat4 irak, empty, ifngammah ] ; [ tbeth, empty, ifngammah ] ; [ gata3, stat1h stat1m, il4 ] ; [ ifngammam, empty, ifngammarm ] ; [ ifngammah socs1, empty, ifngammarm ] ; [ ifngammah, socs1, ifngammarh ] ; [ il4, socs1, il4r ] ; [ il12, stat6, il12r ] ; [ il18, stat6, il18r ] ; [ ifnbeta, empty, ifnbetar ] ; [ ifnbetar, ifngammarh, stat1m ] ; [ ifngammarm, empty, stat1m ] ; [ ifngammarh, empty, stat1h ] ; [ il4r, empty, stat6 ] ; [ il12r, gata3, stat4 ] ; [ il18r, empty, irak ] ; [ stat1h, empty, socs1 ] ; [ stat1m, empty, socs1 ] ; [ tbeth, empty, socs1 ] ; [ tbetm, empty, socs1 ] ; [ stat6, tbeth tbetm, gata3 ] ; [ gata3, tbeth tbetm, gata3 ] ; [ tbetm, tbeth gata3 stat1h, tbetm ] ; [ stat1m, tbeth gata3 stat1h, tbetm ] ; [ tbeth, gata3, tbeth ] ; [ stat1h, gata3, tbeth ] ; [ il12r il18r, gata3, s4ir ] | ifngammah gata3 | empty | ifngammah | empty > .
)

---red remove([stat1h,gata3,tbeth] ; [stat1h,empty,socs1],[gata3,tbeth ---tbetm,gata3] ; [stat1h,empty,socs1] ; [il4r,empty,stat6] ; [il4,socs1,il4r]) .